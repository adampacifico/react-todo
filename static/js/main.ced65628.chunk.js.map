{"version":3,"sources":["components/Todo.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","completedTodo","deleteTask","type","checked","completed","onChange","id","className","text","Moment","todoDate","format","onClick","alert","TodoList","todos","length","map","App","useState","todoList","setTodoList","todoRef","useRef","ref","todoText","current","value","todoDates","prevTodo","Math","floor","random","newTodos","find","updateTodo","filter","t","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA6BeA,MAzBf,YAAoD,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,WAQnC,OACE,+BACE,uBACEC,KAAK,WACLC,QAASJ,EAAKK,UACdC,SAZN,WACEL,EAAcD,EAAKO,OAajB,sBAAKC,UAAU,WAAf,UACE,oCAAOR,EAAKS,QACZ,kCAAKC,IAAOV,EAAKW,UAAUC,OAAO,mBAAlC,UAGF,wBAAQC,QAhBZ,WACEX,EAAWF,EAAKO,IACXP,EAAKK,WAAWS,MAAM,oCAczB,mBCCSC,MAtBf,YAAyD,IAArCC,EAAoC,EAApCA,MAAOf,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,WACxC,OACE,mCACoB,IAAjBc,EAAMC,OACL,2CAEA,6BACGD,EAAME,KAAI,SAAClB,GAAD,OACT,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,cAAeA,EAAeC,WAAYA,GAA/DF,EAAKO,YC8CbY,MArDf,WAAe,MAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,KAIPC,EAAUC,mBACVb,EAAWa,mBAgCjB,OACE,qBAAKhB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,2CACA,sBAAKA,UAAU,SAAf,UACE,uBAAOL,KAAK,OAAOsB,IAAKF,IACxB,uBAAOpB,KAAK,iBAAiBsB,IAAKd,IAClC,wBAAQE,QApChB,WACE,IAAMa,EAAWH,EAAQI,QAAQC,MAC3BC,EAAYlB,EAASgB,QAAQC,MAEN,KAA1BL,EAAQI,QAAQC,MACjBd,MAAM,sBAGNQ,GAAY,SAAAQ,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAqB,CAAEvB,GAAIwB,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkBxB,KAAMiB,EAAUrB,WAAW,EAAOM,SAAWkB,QAE5GN,EAAQI,QAAQC,MAAQ,GACxBjB,EAASgB,QAAQC,MAAQ,KAwBrB,oBAGF,cAAC,EAAD,CAAUZ,MAAOK,EAAUpB,cAhBjC,SAAuBM,GACrB,IAAM2B,EAAQ,YAAOb,GACfrB,EAAOkC,EAASC,MAAK,SAAAnC,GAAI,OAAIA,EAAKO,KAAOA,KAC/CP,EAAKK,WAAaL,EAAKK,UACvBiB,EAAYY,IAYiDhC,WAtB/D,WACE,IAAMkC,EAAaf,EAASgB,QAAO,SAAAC,GAAC,OAAKA,EAAEjC,aAC3CiB,EAAYc,YCnBDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ced65628.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Todo.css\";\r\nimport Moment from \"moment\";\r\n\r\nfunction Todo({ todo, completedTodo, deleteTask }) {\r\n  function handleToggle() {\r\n    completedTodo(todo.id);\r\n  }\r\n  function handleDelete() {\r\n    deleteTask(todo.id);\r\n    if (!todo.completed) alert(\"You Must Check Completion First\");\r\n  }\r\n  return (\r\n    <li>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={todo.completed}\r\n        onChange={handleToggle}\r\n      ></input>\r\n      <div className=\"todoText\">\r\n        <div> {todo.text}</div>\r\n        <p> {Moment(todo.todoDate).format(\"DD MMM, hh:MM a\")} </p>\r\n      </div>\r\n\r\n      <button onClick={handleDelete}>X</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo.jsx\";\r\n\r\nfunction TodoList({ todos, completedTodo, deleteTask }) {\r\n  return (\r\n    <>\r\n      {todos.length === 0 ? (\r\n        <h2> No Tasks</h2>\r\n      ) : (\r\n        <ul>\r\n          {todos.map((todo) => (\r\n            <Todo key={todo.id} todo={todo} completedTodo={completedTodo} deleteTask={deleteTask} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n/* <ul>\r\n{numbers.map((number) =>\r\n  <ListItem key={number.toString()}\r\n            value={number} />\r\n)}\r\n</ul> */\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoList from './components/TodoList';\nimport React, { useState, useRef } from \"react\";\n\nfunction App() {\n  // declaring new state\n  const [todoList, setTodoList] = useState([])\n  //   using useRef\n  const todoRef = useRef()\n  const todoDate = useRef()\n\n  // button function Add\n  function handleAdd() {\n    const todoText = todoRef.current.value;\n    const todoDates = todoDate.current.value;\n  \n    if(todoRef.current.value === ''){\n      alert('Please Enter Task')\n    }\n    else{\n      setTodoList(prevTodo => {\n        return [...prevTodo, { id: Math.floor(Math.random() * 1000), text: todoText, completed: false, todoDate : todoDates }]\n      })\n      todoRef.current.value = '';\n      todoDate.current.value = ''\n    }\n   \n  }\n  // button function clear completed\n  function handleClear() {\n    const updateTodo = todoList.filter(t => !t.completed)\n    setTodoList(updateTodo)\n  }\n\n  // todo checkbox function\n  function completedTodo(id) {\n    const newTodos = [...todoList]\n    const todo = newTodos.find(todo => todo.id === id)\n    todo.completed = !todo.completed;\n    setTodoList(newTodos)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Todo List</h1>\n        <div className=\"inputs\">      \n          <input type=\"text\" ref={todoRef}></input>\n          <input type=\"datetime-local\" ref={todoDate}></input>\n          <button onClick={handleAdd}>Add</button>\n        </div>\n\n        <TodoList todos={todoList} completedTodo={completedTodo} deleteTask={handleClear} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}